/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tumoralgrowthautomaton;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;

/**
 *
 * @author manolo
 */
public class TumorAutomatonUI extends javax.swing.JFrame {
    private static SwingWorker worker;
    private static boolean terminate;
    
    private static TumorAutomaton tumor;
    private static BufferedImage image;
    private static long it_;

    private static int    fieldSize; 
    private static int    fieldIt; 
    private static double fieldPs; 
    private static double fieldPp; 
    private static double fieldPm; 
    private static byte   fieldNP; 
    private static byte   fieldRho;
    
    private static long   population_ = 0;
    private static double dead_       = 0;
    private static double dormant_    = 0;
    private static double alive_      = 0;
    
    private static TumorAutomatonInfo info = new TumorAutomatonInfo();
    
    /**
     * Creates new form TumorAutomatonUI
     */
    public TumorAutomatonUI() {
        initComponents();
        info.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        size = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        it = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        ps = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        pp = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        pm = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        np = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        rho = new javax.swing.JSpinner();
        simulateButton = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JButton();
        infoButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        seeds = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        distribution = new javax.swing.JComboBox<>();
        canvas = new JPanel()
        {
            @Override
            public void paint(Graphics g)
            {
                g.drawImage(image, 0, 0, this.getSize().width, this.getSize().height, null);
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tumor Simulator");
        setMinimumSize(new java.awt.Dimension(687, 438));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros"));

        size.setModel(new javax.swing.SpinnerNumberModel(400, 0, null, 100));
        size.setToolTipText("Tamaño del dominio tisular");
        size.setName("size"); // NOI18N

        jLabel1.setText("Tamaño");
        jLabel1.setToolTipText("Tamaño del dominio tisular");

        jLabel2.setText("Pasos");
        jLabel2.setToolTipText("Generaciones a calcular en cada iteración");

        it.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        it.setToolTipText("Generaciones a calcular en cada iteración");
        it.setName("it"); // NOI18N

        jLabel3.setText("Ps");
        jLabel3.setToolTipText("Probabilidad de supervivencia");

        ps.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.99f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));
        ps.setToolTipText("Probabilidad de supervivencia");
        ps.setName("ps"); // NOI18N

        jLabel4.setText("Pp");
        jLabel4.setToolTipText("Probabilidad de proliferación");

        pp.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.4f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        pp.setToolTipText("Probabilidad de proliferación");
        pp.setName("pp"); // NOI18N

        jLabel5.setText("Pm");
        jLabel5.setToolTipText("Probabilidad de migración");

        pm.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.2f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        pm.setToolTipText("Probabilidad de migración");
        pm.setName("pm"); // NOI18N

        jLabel6.setText("NP");
        jLabel6.setToolTipText("Número de señales para proliferar");

        np.setModel(new javax.swing.SpinnerNumberModel((byte)5, (byte)0, null, (byte)1));
        np.setToolTipText("Número de señales para proliferar");
        np.setName("np"); // NOI18N

        jLabel7.setText("ρ");
        jLabel7.setToolTipText("Número de veces que una célula puede proliferar");

        rho.setModel(new javax.swing.SpinnerNumberModel((byte)2, (byte)0, null, (byte)1));
        rho.setToolTipText("Número de veces que una célula puede proliferar");
        rho.setName("rho"); // NOI18N

        simulateButton.setText("Simular");
        simulateButton.setToolTipText("Iniciar/parar simulación");
        simulateButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                simulateButtonItemStateChanged(evt);
            }
        });
        simulateButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                simulateButtonStateChanged(evt);
            }
        });
        simulateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                simulateButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                simulateButtonMouseEntered(evt);
            }
        });
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reiniciar");
        resetButton.setToolTipText("Reiniciar simulación");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        infoButton.setText("Información");
        infoButton.setToolTipText("Abrir la ventana de información adicional");
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Semillas");
        jLabel8.setToolTipText("Número de semillas stem");

        seeds.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        seeds.setToolTipText("Número de semillas stem");
        seeds.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                seedsStateChanged(evt);
            }
        });

        jLabel9.setText("Distribución");
        jLabel9.setToolTipText("Distribución inicial de semillas stem");

        distribution.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Central", "Aleatoria" }));
        distribution.setToolTipText("Distribución inicial de semillas stem");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(infoButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(simulateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetButton)
                        .addGap(6, 12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(seeds)
                                .addComponent(it)
                                .addComponent(ps)
                                .addComponent(pp)
                                .addComponent(pm)
                                .addComponent(np)
                                .addComponent(rho, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                .addComponent(size, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(distribution, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(it, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(pp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(np, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(rho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(seeds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distribution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(infoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(simulateButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel4);

        canvas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                canvasComponentResized(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        getContentPane().add(canvas);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized

    }//GEN-LAST:event_formComponentResized

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        if (!info.isVisible())
            java.awt.EventQueue.invokeLater(() -> {
                info.setVisible(true);
                info.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            });
        else
        {
            info.requestFocus();
            info.toFront();
        }
    }//GEN-LAST:event_infoButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        if (tumor != null)
        {
            while (worker != null && !worker.isDone())
            {
                terminate = true;
                simulateButton.setSelected(false);
            }

            tumor.reset();
            placeStemCells((Integer)seeds.getValue(), distribution.getSelectedIndex());
            Graphics g = canvas.getGraphics();
            g.setColor(Color.GRAY);
            g.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
            it_ = 0;

            java.awt.EventQueue.invokeLater(() -> {
                image = imageColor();
                Graphics gr = canvas.getGraphics();
                gr.drawImage(image, 0, 0, canvas.getSize().width, canvas.getSize().height, null);
                canvas.setVisible(true);
            });
            
            //info.populationHistory = new HistoryArray(1500);
            info.setPopulation((Integer)seeds.getValue());
            info.setEntropy(0);
            info.generations.setText(String.valueOf(it_));
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void simulateButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_simulateButtonStateChanged
        
    }//GEN-LAST:event_simulateButtonStateChanged

    private void simulateButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_simulateButtonItemStateChanged
        if (simulateButton.isSelected())
        {
            while (worker != null && !worker.isDone())
            terminate = true;

            fieldSize = (Integer)size.getValue();
            fieldIt   = (Integer)it.getValue();
            fieldPs   = (Float)ps.getValue();
            fieldPp   = (Float)pp.getValue();
            fieldPm   = (Float)pm.getValue();
            fieldNP   = (Byte)np.getValue();
            fieldRho  = (Byte)rho.getValue();

            if (tumor == null || tumor.size() != fieldSize)
            {
                tumor = new TumorAutomaton(fieldSize);
                placeStemCells((Integer)seeds.getValue(), distribution.getSelectedIndex());
                it_ = 0;
                tumor.threads(Runtime.getRuntime().availableProcessors());
            }

            TumorAutomaton.ps  = (float)fieldPs;
            TumorAutomaton.pp  = (float)fieldPp;
            TumorAutomaton.pm  = (float)fieldPm;
            TumorAutomaton.np  = fieldNP;
            TumorAutomaton.rho = fieldRho;

            terminate = false;

            int s = Math.min(canvas.getSize().width, canvas.getSize().height);
            canvas.setSize(s, s);
            canvas.setVisible(true);
            //revalidate();
            //repaint();

            worker = new SwingWorker<Void, Void>()
            {
                @Override
                public Void doInBackground()
                {
                    while (!terminate)
                    {
                        tumor.execute(fieldIt);
                        it_ += fieldIt;

                        image = imageColor();

                        Graphics g = canvas.getGraphics();
                        g.drawImage(image, 0, 0, canvas.getSize().width, canvas.getSize().height, null);
                        //g.setColor(Color.WHITE);
                        //g.drawString(String.valueOf(it_), 0, 10);

                        long totalCells = fieldSize * fieldSize;
                        double pDead    = dead_ / totalCells;
                        double pDormant = dormant_ / totalCells;
                        double pAlive   = alive_ / totalCells;
                        
                        double entropy  = pDead == 0? 0 : pDead * (Math.log(pDead) / Math.log(3));
                        
                        entropy += pDormant == 0? 0 : pDormant * (Math.log(pDormant) / Math.log(3));
                        entropy += pAlive == 0?   0 : pAlive   * (Math.log(pAlive)   / Math.log(3));
                        entropy *= -1;
                        
                        info.setPopulation(population_);
                        
                        if (!Double.isNaN(entropy))
                            info.setEntropy(entropy);
                        
                        info.generations.setText(String.valueOf(it_));
                    }

                    return null;
                }

                @Override
                protected void done()
                {
                    terminate = false;
                }
            };
            worker.execute();
        }
        else
            terminate = true;
    }//GEN-LAST:event_simulateButtonItemStateChanged

    private void simulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_simulateButtonActionPerformed

    private void seedsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_seedsStateChanged
        int min = (int) Math.ceil(Math.sqrt((Integer)seeds.getValue()));
        SpinnerNumberModel model = ((SpinnerNumberModel)size.getModel());
        
        model.setMinimum(min);
        
        if ((Integer)(model.getValue()) < min)
            model.setValue(min);
    }//GEN-LAST:event_seedsStateChanged

    private void simulateButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simulateButtonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_simulateButtonMouseEntered

    private void simulateButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simulateButtonMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_simulateButtonMouseExited

    private void canvasComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_canvasComponentResized
        Component canvasComponent = evt.getComponent();
        
        if (canvasComponent.isVisible())
        {
            int s = Math.min(canvasComponent.getSize().width, canvasComponent.getSize().height);
            canvasComponent.setSize(s, s);

            canvasComponent.getGraphics().drawImage(image, 0, 0, s, s, null);
            canvasComponent.repaint();
        }
    }//GEN-LAST:event_canvasComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TumorAutomatonUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            TumorAutomatonUI ui = new TumorAutomatonUI();
            ui.setVisible(true);
            ui.canvas.setVisible(false);
        });
    }
    
    BufferedImage imageColor()
    {
        BufferedImage tumorImage;
        if (tumor != null)
        {
                tumorImage = new BufferedImage(tumor.size(), tumor.size(), BufferedImage.TYPE_INT_RGB);
                Graphics tumorG = tumorImage.getGraphics();
                tumorG.setColor(Color.GRAY);
                tumorG.fillRect(0, 0, tumor.size(), tumor.size());

                population_ = 0;
                dead_       = 0;
                dormant_    = 0;
                alive_      = 0;

                for (int i = TumorAutomaton.domainBegin_[0]; i < TumorAutomaton.domainEnd_[0]; ++i)
                {
                        for (int j = TumorAutomaton.domainBegin_[1]; j < TumorAutomaton.domainEnd_[1]; ++j)
                        {
                                int color;

                                switch (tumor.cellState(i, j))
                                {
                                        case 0:
                                                color = Color.GRAY.getRGB();
                                                ++dead_;
                                                break;

                                        case 1:
                                                color = Color.DARK_GRAY.getRGB();
                                                ++population_;
                                                ++dormant_;
                                                break;

                                        case 2:
                                                color = Color.BLACK.getRGB();
                                                ++population_;
                                                ++alive_;
                                                break;

                                        case 3:
                                                color = Color.RED.getRGB();
                                                ++population_;
                                                ++alive_;
                                                break;

                                        case 4:
                                                color = Color.GREEN.getRGB();
                                                ++population_;
                                                ++alive_;
                                                break;

                                        default:
                                                color = Color.MAGENTA.getRGB();
                                }

                                tumorImage.setRGB(j, i, color);
                        }
                }
        }
        else
        {
            int s = (Integer)size.getValue();
            tumorImage = new BufferedImage(s, s, BufferedImage.TYPE_INT_RGB);
            Graphics tumorG = tumorImage.getGraphics();
            tumorG.setColor(Color.GRAY);
            tumorG.fillRect(0, 0, s, s);
        }
        
        return tumorImage;
    }
    
    private void placeStemCells(int quantity, int option)
    {
        int s = ((Integer)size.getValue());
        
        switch (option)
        {
            case 0:
                int rangeBegin = (int) (s / 2 - Math.ceil(Math.sqrt(quantity)));
                int rangeEnd   = (int) (s / 2 + Math.ceil(Math.sqrt(quantity)));
                
                while (quantity > 0)
                {
                    int x = (int) (rangeBegin + Math.random() * (rangeEnd - rangeBegin));
                    int y = (int) (rangeBegin + Math.random() * (rangeEnd - rangeBegin));
                    
                    if (tumor.cellState(x, y) == TumorAutomaton.DEAD)
                    {
                        tumor.setStem(x, y);
                        --quantity;
                    }
                }
                break;
            
            case 1:
                while (quantity > 0)
                {
                    int x = (int) (Math.random() * s);
                    int y = (int) (Math.random() * s);
                    
                    if (tumor.cellState(x, y) == TumorAutomaton.DEAD)
                    {
                        tumor.setStem(x, y);
                        --quantity;
                    }
                }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvas;
    private javax.swing.JComboBox<String> distribution;
    private javax.swing.JButton infoButton;
    private javax.swing.JSpinner it;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSpinner np;
    private javax.swing.JSpinner pm;
    private javax.swing.JSpinner pp;
    private javax.swing.JSpinner ps;
    private javax.swing.JButton resetButton;
    private javax.swing.JSpinner rho;
    private javax.swing.JSpinner seeds;
    private javax.swing.JToggleButton simulateButton;
    private javax.swing.JSpinner size;
    // End of variables declaration//GEN-END:variables
}
